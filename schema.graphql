enum DownloadState {
  NONE
  DOWNLOADING
  DOWNLOADED
  DOWNLOAD_ERROR
}

type Gqltastate {
  coordinators: [User!]!
  players: [User!]!
  matches: [Match!]!
}

type Map {
  hash: String!
  name: String!
  difficulty: Int!
  modifiers: [String!]!
}

type Match {
  guid: UUID!
  players: [User!]!
  teams: [Team!]!
  coordinators: [User!]!
  currentMap: Map
  scores: [Score!]!
}

enum PlayState {
  WAITING
  IN_GAME
}

type Query {
  state: Gqltastate!
  matchById(id: UUID!): Match
}

type Score {
  ownerGuid: UUID!
  score: Int!
  scoreWithModifiers: Int!
  maxScore: Int!
  maxScoreWithModifiers: Int!
  combo: Int!
  playerHealth: Float!
  accuracy: Float!
  songPosition: Float!
  notesMissed: Int!
  badCuts: Int!
  bombHits: Int!
  wallHits: Int!
  maxCombo: Int!
  leftHandHits: Int!
  leftHandMisses: Int!
  leftHandBadCut: Int!
  rightHandHits: Int!
  rightHandMisses: Int!
  rightHandBadCut: Int!
}

type Team {
  guid: UUID!
  name: String!
}

# A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
# Strings within GraphQL. UUIDs are used to assign unique identifiers to
# entities without requiring a central allocating authority.
#
# # References
#
# * [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
# * [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
scalar UUID

type User {
  guid: UUID!
  name: String!
  userId: String!
  playState: PlayState!
  downloadState: DownloadState!
  team: Team
  modList: [String!]!
  streamDelayMs: Int!
  streamSyncStartMs: Int!
}
